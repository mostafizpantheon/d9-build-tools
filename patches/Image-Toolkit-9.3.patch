From 0b5eac1e4878a63515ffbd97173e0f7b648691d8 Mon Sep 17 00:00:00 2001
From: mondrake <mondrake.org@gmail.com>
Date: Thu, 12 Nov 2020 21:04:39 +0100
Subject: [PATCH 1/3] 88

---
 .../Core/ImageToolkit/ImageToolkitBase.php    | 10 ++-
 .../src/Plugin/ImageToolkit/GDToolkit.php     | 68 +++++++++++++------
 .../KernelTests/Core/Image/ToolkitGdTest.php  | 26 +++++++
 3 files changed, 80 insertions(+), 24 deletions(-)

diff --git a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
index ce0e283c8ef..2281386528a 100644
--- a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
+++ b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
@@ -127,8 +127,14 @@ public function apply($operation, array $arguments = []) {
       $this->logger->error("The selected image handling toolkit '@toolkit' can not process operation '@operation'.", ['@toolkit' => $this->getPluginId(), '@operation' => $operation]);
       return FALSE;
     }
-    catch (\InvalidArgumentException $e) {
-      $this->logger->warning($e->getMessage(), []);
+    catch (\Throwable $t) {
+      $this->logger->warning("The image toolkit '@toolkit' failed processing '@operation' for image '@image'. Reported error: @class - @message", [
+        '@toolkit' => $this->getPluginId(),
+        '@operation' => $operation,
+        '@image' => $this->getSource(),
+        '@class' => get_class($t),
+        '@message' =>  $t->getMessage(),
+      ]);
       return FALSE;
     }
   }
diff --git a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
index 19752743269..3d81b5c3d76 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
@@ -197,31 +197,55 @@ protected function load() {
       return FALSE;
     }

+    // Invalidate the image object and return if there's no function to load the
+    // image file.
     $function = 'imagecreatefrom' . image_type_to_extension($this->getType(), FALSE);
-    if (function_exists($function) && $resource = $function($this->getSource())) {
-      $this->setResource($resource);
-      if (imageistruecolor($resource)) {
-        return TRUE;
-      }
-      else {
-        // Convert indexed images to truecolor, copying the image to a new
-        // truecolor resource, so that filters work correctly and don't result
-        // in unnecessary dither.
-        $data = [
-          'width' => imagesx($resource),
-          'height' => imagesy($resource),
-          'extension' => image_type_to_extension($this->getType(), FALSE),
-          'transparent_color' => $this->getTransparentColor(),
-          'is_temp' => TRUE,
-        ];
-        if ($this->apply('create_new', $data)) {
-          imagecopy($this->getResource(), $resource, 0, 0, 0, 0, imagesx($resource), imagesy($resource));
-          imagedestroy($resource);
-        }
+    if (!function_exists($function)) {
+      $this->logger->error("The image toolkit '@toolkit' can not process image '@image'.", [
+        '@toolkit' => $this->getPluginId(),
+        '@image' => $this->getSource(),
+      ]);
+      $this->preLoadInfo = NULL;
+      return FALSE;
+    }
+
+    // Invalidate the image object and return if the load fails.
+    try {
+      $resource = $function($this->getSource());
+    }
+    catch (\Throwable $t) {
+      $this->logger->error("The image toolkit '@toolkit' failed loading image '@image'. Reported error: @class - @message", [
+        '@toolkit' => $this->getPluginId(),
+        '@operation' => $operation,
+        '@image' => $this->getSource(),
+        '@class' => get_class($t),
+        '@message' =>  $t->getMessage(),
+      ]);
+      $this->preLoadInfo = NULL;
+      return FALSE;
+    }
+
+    $this->setResource($resource);
+    if (imageistruecolor($resource)) {
+      return TRUE;
+    }
+    else {
+      // Convert indexed images to truecolor, copying the image to a new
+      // truecolor resource, so that filters work correctly and don't result
+      // in unnecessary dither.
+      $data = [
+        'width' => imagesx($resource),
+        'height' => imagesy($resource),
+        'extension' => image_type_to_extension($this->getType(), FALSE),
+        'transparent_color' => $this->getTransparentColor(),
+        'is_temp' => TRUE,
+      ];
+      if ($this->apply('create_new', $data)) {
+        imagecopy($this->getResource(), $resource, 0, 0, 0, 0, imagesx($resource), imagesy($resource));
+        imagedestroy($resource);
       }
-      return (bool) $this->getResource();
     }
-    return FALSE;
+    return (bool) $this->getResource();
   }

   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php b/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php
index b5dddf39590..492c63a11ba 100644
--- a/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php
@@ -459,6 +459,32 @@ public function testResourceDestruction() {
     $this->assertIsResource($new_res);
   }

+  /**
+   * Tests creation of an image that will exceed the memory limit.
+   */
+  public function testInsufficientMemory() {
+    $image = $this->imageFactory->get('core/tests/fixtures/files/image-test.png');
+
+    $old_res = $image->getToolkit()->getResource();
+    $this->assertFalse($image->createNew(200000, 200000));
+    $new_res = $image->getToolkit()->getResource();
+
+    // Check that a new resource has not been created, and the old one is still
+    // valid.
+    $this->assertEquals($old_res, $new_res);
+  }
+
+  /**
+   * Tests resizing of an image that will exceed the memory available.
+   */
+  public function testInsufficientAvailableMemory() {
+    $image = $this->imageFactory->get('core/tests/fixtures/files/image-test.png');
+
+    $memory_in_use = memory_get_usage(TRUE);
+    ini_set('memory_limit', $memory_in_use + 2048);
+    $this->assertFalse($image->resize(20000, 20000));
+  }
+
   /**
    * Tests for GIF images with transparency.
    */
--
GitLab


From f9fe80851fcb157d34e551466f41d52d0d3a9b7e Mon Sep 17 00:00:00 2001
From: mondrake <mondrake.org@gmail.com>
Date: Thu, 12 Nov 2020 22:07:08 +0100
Subject: [PATCH 2/3] Add GDToolkit::isMemoryAvailable

---
 .../Core/ImageToolkit/ImageToolkitBase.php    |  2 +-
 .../ImageToolkitOperationBase.php             |  3 +
 .../src/Plugin/ImageToolkit/GDToolkit.php     | 62 ++++++++++++++++++-
 .../ImageToolkit/Operation/gd/CreateNew.php   |  3 +
 .../ImageToolkit/Operation/gd/Rotate.php      |  5 ++
 5 files changed, 73 insertions(+), 2 deletions(-)

diff --git a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
index 2281386528a..1fba3608048 100644
--- a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
+++ b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
@@ -133,7 +133,7 @@ public function apply($operation, array $arguments = []) {
         '@operation' => $operation,
         '@image' => $this->getSource(),
         '@class' => get_class($t),
-        '@message' =>  $t->getMessage(),
+        '@message' => $t->getMessage(),
       ]);
       return FALSE;
     }
diff --git a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php
index dcc3b3d1213..95b8a9c4f78 100644
--- a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php
+++ b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php
@@ -185,6 +185,9 @@ final public function apply(array $arguments) {
    *
    * @return bool
    *   TRUE if the operation was performed successfully, FALSE otherwise.
+   *
+   * @throws \RuntimeException
+   *   If the operation can not be performed.
    */
   abstract protected function execute(array $arguments);

diff --git a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
index 3d81b5c3d76..877ae7cf644 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
@@ -2,6 +2,7 @@

 namespace Drupal\system\Plugin\ImageToolkit;

+use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Color;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\Exception\FileException;
@@ -211,6 +212,7 @@ protected function load() {

     // Invalidate the image object and return if the load fails.
     try {
+      $this->isMemoryAvailable('load', $this->getWidth(), $this->getHeight());
       $resource = $function($this->getSource());
     }
     catch (\Throwable $t) {
@@ -219,7 +221,7 @@ protected function load() {
         '@operation' => $operation,
         '@image' => $this->getSource(),
         '@class' => get_class($t),
-        '@message' =>  $t->getMessage(),
+        '@message' => $t->getMessage(),
       ]);
       $this->preLoadInfo = NULL;
       return FALSE;
@@ -494,4 +496,62 @@ protected static function supportedTypes() {
     return [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];
   }

+  /**
+   * Checks that there is enough memory available for a GD operation.
+   *
+   * GD functions that create new GD resources will fail fatally if there is
+   * not enough memory available to perform the operation. This method checks
+   * if there is enough memory available before calling the GD function. The
+   * algorithm implemented follows the one described in
+   * http://php.net/manual/en/function.imagecreatetruecolor.php#99623.
+   *
+   * @param string $operation
+   *   The operation for which memory is checked.
+   * @param int $width
+   *   The image width.
+   * @param int $height
+   *   The image height.
+   * @param int $bits_per_pixel
+   *   (optional) The bits per pixel of the image. Defaults to 31, as GD
+   *   internally manages RGB with 8 bits each color + 7 bits for the alpha
+   *   channel.
+   * @param float $tweak_factor
+   *   (optional) A tweak factor as described in
+   *   http://php.net/manual/en/function.imagecreatetruecolor.php#99623.
+   *   Was defaults to 1.7. Oomph changed to 1.3
+   *
+   * @see http://php.net/manual/en/function.imagecreatetruecolor.php#99623
+   *
+   * @throws \RuntimeException
+   *   If the operation can not be performed.
+   */
+  public function isMemoryAvailable(string $operation, int $width, int $height, int $bits_per_pixel = 31, float $tweak_factor = 1.3): void {
+    // Bytes per pixel need to accommodate enough bytes to store all the bits
+    // needed.
+    $bytes_per_pixel = ceil($bits_per_pixel / 8);
+
+    // ini_get() may return -1 or null for memory_limit to indicate there is no
+    // limit set.
+    $size = ini_get('memory_limit');
+    $total = (!$size || (int) $size === -1) ? -1 : Bytes::toNumber($size);
+    $used = memory_get_usage(TRUE);
+    $free = $total === -1 ? -1 : $total - $used;
+
+    if ($free === -1) {
+      return;
+    }
+
+    $required = (int) ($width * $height * $bytes_per_pixel * $tweak_factor);
+
+    if ($required < $free) {
+      throw new \RuntimeException(sprintf("Not enough memory (required: %s, free: %s, total: %s) to perform '%s' for file '%s'",
+        format_size($required),
+        format_size($free),
+        format_size($total),
+        $operation,
+        $this->getSource()
+      ));
+    }
+  }
+
 }
diff --git a/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/CreateNew.php b/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/CreateNew.php
index fef47e90171..c221e125ca2 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/CreateNew.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/CreateNew.php
@@ -79,6 +79,9 @@ protected function validateArguments(array $arguments) {
    * {@inheritdoc}
    */
   protected function execute(array $arguments) {
+    // Check if enough memory is available.
+    $this->getToolkit()->isMemoryAvailable($this->getPluginId(), $arguments['width'], $arguments['height']);
+
     // Get the image type.
     $type = $this->getToolkit()->extensionToImageType($arguments['extension']);

diff --git a/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php b/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php
index e567ea43f26..460dfa0a18b 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php
@@ -3,6 +3,7 @@
 namespace Drupal\system\Plugin\ImageToolkit\Operation\gd;

 use Drupal\Component\Utility\Color;
+use Drupal\Component\Utility\Rectangle;

 /**
  * Defines GD2 rotate operation.
@@ -93,6 +94,10 @@ protected function execute(array $arguments) {
       return FALSE;
     }

+    // Check if enough memory is available.
+    $rect = (new Rectangle($this->getToolkit()->getWidth(), $this->getToolkit()->getHeight()))->rotate($arguments['degrees']);
+    $this->getToolkit()->isMemoryAvailable($this->getPluginId(), $rect->getBoundingWidth(), $rect->getBoundingHeight());
+
     // Stores the original GD resource.
     $original_res = $this->getToolkit()->getResource();

--
GitLab


From b7d623b67f0266fe2cf30fbce0436928deedfaa0 Mon Sep 17 00:00:00 2001
From: mondrake <mondrake.org@gmail.com>
Date: Thu, 12 Nov 2020 23:20:12 +0100
Subject: [PATCH 3/3] fixes

---
 .../system/src/Plugin/ImageToolkit/GDToolkit.php      | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
index 877ae7cf644..741a53a818e 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
@@ -218,7 +218,6 @@ protected function load() {
     catch (\Throwable $t) {
       $this->logger->error("The image toolkit '@toolkit' failed loading image '@image'. Reported error: @class - @message", [
         '@toolkit' => $this->getPluginId(),
-        '@operation' => $operation,
         '@image' => $this->getSource(),
         '@class' => get_class($t),
         '@message' => $t->getMessage(),
@@ -533,17 +532,15 @@ public function isMemoryAvailable(string $operation, int $width, int $height, in
     // ini_get() may return -1 or null for memory_limit to indicate there is no
     // limit set.
     $size = ini_get('memory_limit');
-    $total = (!$size || (int) $size === -1) ? -1 : Bytes::toNumber($size);
-    $used = memory_get_usage(TRUE);
-    $free = $total === -1 ? -1 : $total - $used;
-
-    if ($free === -1) {
+    if (!$size || (int) $size === -1) {
       return;
     }

+    $total = Bytes::toNumber($size);
+    $free = $total - memory_get_usage(TRUE);
     $required = (int) ($width * $height * $bytes_per_pixel * $tweak_factor);

-    if ($required < $free) {
+    if ($required > $free) {
       throw new \RuntimeException(sprintf("Not enough memory (required: %s, free: %s, total: %s) to perform '%s' for file '%s'",
         format_size($required),
         format_size($free),
--
GitLab
